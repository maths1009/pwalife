name: Build & Deploy

on:
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: 🔧 Setup Bun & Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Restore dependency cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            bun.lockb
          key: bun-deps-${{ runner.os }}-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            bun-deps-${{ runner.os }}-

      - name: 📦 Install dependencies (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: 📁 Cache repository & dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: repo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            repo-${{ runner.os }}-

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Restore repository & dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: repo-${{ runner.os }}-${{ github.sha }}

      - name: 🏗️ Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 🏗️ Build the project
        run: bun run eslint

      - name: 📁 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: env

    steps:
      - name: 📥 Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ runner.os }}-${{ github.sha }}

      - name: 📦 Copy files to the server via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATEKEY }}
          source: "dist/*"
          target: "."
          strip_components: 1
